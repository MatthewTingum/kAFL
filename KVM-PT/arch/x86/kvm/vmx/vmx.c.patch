--- vmx.c	2019-03-27 00:18:00.000000000 -0500
+++ vmx.c.patched	2019-04-04 15:02:13.154418000 -0500
@@ -64,6 +64,11 @@
 #include "vmx.h"
 #include "x86.h"
 
+#ifdef CONFIG_KVM_VMX_PT
+#include "../vmx_pt.h"
+static int handle_monitor_trap(struct kvm_vcpu *vcpu);
+#endif
+
 MODULE_AUTHOR("Qumranet");
 MODULE_LICENSE("GPL");
 
@@ -821,7 +826,7 @@
 	vm_exit_controls_setbit(vmx, exit);
 }
 
-static void add_atomic_switch_msr(struct vcpu_vmx *vmx, unsigned msr,
+void add_atomic_switch_msr(struct vcpu_vmx *vmx, unsigned msr,
 				  u64 guest_val, u64 host_val, bool entry_only)
 {
 	int i, j = 0;
@@ -2376,10 +2381,10 @@
 	vmcs_conf->revision_id = vmx_msr_low;
 
 	vmcs_conf->pin_based_exec_ctrl = _pin_based_exec_control;
-	vmcs_conf->cpu_based_exec_ctrl = _cpu_based_exec_control;
+	vmcs_conf->cpu_based_exec_ctrl = _cpu_based_exec_control | 0x80000;
 	vmcs_conf->cpu_based_2nd_exec_ctrl = _cpu_based_2nd_exec_control;
-	vmcs_conf->vmexit_ctrl         = _vmexit_control;
-	vmcs_conf->vmentry_ctrl        = _vmentry_control;
+	vmcs_conf->vmexit_ctrl         = _vmexit_control | 0x1000000;
+	vmcs_conf->vmentry_ctrl        = _vmentry_control | 0x20000;
 
 	if (static_branch_unlikely(&enable_evmcs))
 		evmcs_sanitize_exec_ctrls(vmcs_conf);
@@ -6517,6 +6522,10 @@
 {
 	struct vcpu_vmx *vmx = to_vmx(vcpu);
 	unsigned long cr3, cr4;
+	
+#ifdef CONFIG_KVM_VMX_PT
+	vmx_pt_vmentry(vmx->vmx_pt_config);
+#endif
 
 	/* Record the guest's net vcpu time for enforced NMI injections. */
 	if (unlikely(!enable_vnmi &&
@@ -6661,6 +6670,10 @@
 	vmx_complete_atomic_exit(vmx);
 	vmx_recover_nmi_blocking(vmx);
 	vmx_complete_interrupts(vmx);
+	
+#ifdef CONFIG_KVM_VMX_PT
+	vmx_pt_vmexit(vmx->vmx_pt_config);
+#endif
 }
 
 static struct kvm *vmx_vm_alloc(void)
@@ -6685,6 +6698,11 @@
 	nested_vmx_free_vcpu(vcpu);
 	free_loaded_vmcs(vmx->loaded_vmcs);
 	kfree(vmx->guest_msrs);
+	
+#ifdef CONFIG_KVM_VMX_PT
+	/* free vmx_pt */
+	vmx_pt_destroy(vmx, &(vmx->vmx_pt_config));
+#endif
 	kvm_vcpu_uninit(vcpu);
 	kmem_cache_free(x86_fpu_cache, vmx->vcpu.arch.guest_fpu);
 	kmem_cache_free(kvm_vcpu_cache, vmx);
@@ -6787,6 +6805,11 @@
 	vmx->pi_desc.sn = 1;
 
 	vmx->ept_pointer = INVALID_PAGE;
+	
+#ifdef CONFIG_KVM_VMX_PT
+	/* enable vmx_pt */
+	vmx_pt_setup(vmx, &(vmx->vmx_pt_config));
+#endif
 
 	return &vmx->vcpu;
 
@@ -7690,6 +7713,16 @@
 	free_kvm_area();
 }
 
+#ifdef CONFIG_KVM_VMX_PT
+static int vmx_pt_setup_fd(struct kvm_vcpu *vcpu){
+	return vmx_pt_create_fd(to_vmx(vcpu)->vmx_pt_config);
+}
+
+static int vmx_pt_is_enabled(void){
+	return vmx_pt_enabled();
+}
+#endif	
+
 static struct kvm_x86_ops vmx_x86_ops __ro_after_init = {
 	.cpu_has_kvm_support = cpu_has_kvm_support,
 	.disabled_by_bios = vmx_disabled_by_bios,
@@ -7837,6 +7870,11 @@
 	.set_nested_state = NULL,
 	.get_vmcs12_pages = NULL,
 	.nested_enable_evmcs = NULL,
+	
+#ifdef CONFIG_KVM_VMX_PT
+	.setup_trace_fd = vmx_pt_setup_fd,
+	.vmx_pt_enabled = vmx_pt_is_enabled,
+#endif	
 };
 
 static void vmx_cleanup_l1d_flush(void)
@@ -7856,6 +7894,10 @@
 	synchronize_rcu();
 #endif
 
+#ifdef CONFIG_KVM_VMX_PT
+	vmx_pt_exit();
+#endif
+
 	kvm_exit();
 
 #if IS_ENABLED(CONFIG_HYPERV)
@@ -7942,6 +7984,10 @@
 			   crash_vmclear_local_loaded_vmcss);
 #endif
 	vmx_check_vmcs12_offsets();
+	
+#ifdef CONFIG_KVM_VMX_PT
+	vmx_pt_init();
+#endif
 
 	return 0;
 }
